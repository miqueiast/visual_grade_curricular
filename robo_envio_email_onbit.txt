import openpyxl, smtplib, sys
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

#Abre a planilha e obtém o status do último pagamento.

wb = openpyxl.load_workbook('C:/temp/cobranca.xlsx')
sheet = wb['Sheet1']

lastCol = sheet.max_column
#latestMonth = sheet.cell(row=1, column=lastCol).value

#Verifica o status de pagamento de cada cliente.

unpaidMembers = {}
for r in range(2, sheet.max_row + 1):
  for c in range(3, lastCol + 1):
    payment = sheet.cell(row=r, column=c).value
    if payment != 'ok':
        cliente = sheet.cell(row=r, column=1).value
        email = sheet.cell(row=r, column=2).value
        mes = sheet.cell(row=1, column=c).value
        unpaidMembers[cliente] = email
        print('Linha:',r,'Coluna:',c,'Cliente:',cliente,'Email:',email,'Mês:',mes)

#Faz login na conta de email.

for cliente, email, in unpaidMembers.items():
    body = "cliente: %s | mes: %s" % (cliente, mes)
    print('sending email to %s...' % (email))

    # create message object instance
    msg = MIMEMultipart()

    # setup the parameters of the message
    password = "senha"
    msg['From'] = "email@email.com"
    msg['To'] = email
    msg['Subject'] = "%s - Honorário em aberto." % (cliente)

    # add in the message body
    msg.attach(MIMEText(body))

    # create server
    server = smtplib.SMTP('smtp.gmail.com: 587')

    server.starttls()

    # Login Credentials for sending the mail
    server.login(msg['From'], password)

    # send the message via the server.
    server.sendmail(msg['From'], email, msg.as_string())

server.quit()

print("successfully sent email to %s:" % (email))




e você estiver utilizando o sistema operacional Windows, você pode agendar a execução do script usando o Agendador de Tarefas. Aqui estão as etapas para agendar a tarefa para executar o script Python diariamente às 5 da manhã:

Abra o "Agendador de Tarefas" no seu computador (você pode encontrá-lo no "Painel de Controle" -> "Ferramentas Administrativas" -> "Agendador de Tarefas").

No painel direito, clique em "Criar Tarefa Básica..." para iniciar o assistente.

Dê um nome à sua tarefa e uma descrição opcional. Clique em "Avançar".

Selecione a opção "Diariamente" e clique em "Avançar".

Especifique a data de início e a hora de início, que deve ser 5:00 da manhã. Clique em "Avançar".

Selecione a opção "Repetir a cada" e defina para "1 dia". Defina o número de dias como "1". Isso garantirá que a tarefa seja repetida diariamente. Clique em "Avançar".

Selecione a opção "Iniciar um programa" e clique em "Avançar".

No campo "Programa/script", insira o caminho para o executável do Python. Por exemplo, C:\caminho\para\python.exe. No campo "Adicionar argumentos (opcional)", insira o caminho completo para o seu script Python. Clique em "Avançar".

Revise as configurações e clique em "Concluir" para criar a tarefa agendada.

Certifique-se de que o Python esteja no seu PATH ou forneça o caminho completo para o executável do Python. Além disso, ajuste os caminhos conforme necessário para o seu ambiente.

Se você estiver usando um sistema operacional diferente, como Linux, o processo pode variar um pouco, mas normalmente você pode usar o cron para agendar tarefas. O método exato dependerá do sistema operacional específico que você está utilizando.
